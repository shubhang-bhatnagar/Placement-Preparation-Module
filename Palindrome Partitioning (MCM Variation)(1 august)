class Solution {
    static int dp[][] = new int[501][501];

    static int palindromicPartition(String str) {
        int n = str.length();
        for (int row[] : dp) {
            Arrays.fill(row, -1);
        }
        return palinPartitionRecursive(str, 0, n - 1);
    }

    public static boolean isPalindrome(String str, int i, int j) {
        while (i <= j) {
            if (str.charAt(i) != str.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    public static int palinPartitionRecursive(String s, int i, int j) {
        if (i >= j) {
            return 0;
        }
        if (isPalindrome(s, i, j)) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }

        int ans = Integer.MAX_VALUE;
        for (int k = i; k <= j - 1; k++) {
            int temp = palinPartitionRecursive(s, i, k) + palinPartitionRecursive(s, k + 1, j) + 1;
            ans = Math.min(ans, temp);
        }
        return dp[i][j] = ans;
    }
}
