class Solution {
    public int numIslands(char[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;

        int visited[][] = new int[n][m]; 
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                visited[i][j] = 0;
            }
        }

        int count = 0; 
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){

                if(visited[i][j] == 0 && grid[i][j] == '1'){
                    count++;
                    dfs(grid,i, j, visited);
                }
            }
        }
        return count; // Return the total count of islands
    }
    private void dfs(char grid[][], int row, int col, int visited[][]){

        visited[row][col] = 1;
        int n = grid.length;
        int m = grid[0].length;

        int delrow[] = {-1, 0, 1, 0}; 
        for(int i = 0; i < 4; i++){

            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            if(nrow >= 0  && nrow < n && ncol >= 0 && ncol < m
                && visited[nrow][ncol] == 0 && grid[nrow][ncol] == '1')
                {
                    dfs(grid, nrow, ncol, visited);
                } 
        }
    }
}
